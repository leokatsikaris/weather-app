{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leone\\\\Desktop\\\\Henry_m2\\\\FT-M2\\\\08-React-Estado-LifeCycle\\\\homework\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Nav from \"./components/Nav.jsx\";\nimport Cards from \"./components/Cards.jsx\";\nimport obj from \"./components/modules/App.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n\n  function onSearch(ciudad) {\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=5bb68976e3a596b8fcd7286589d12add&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  function onClose(idCity) {\n    setCities(oldCities => oldCities.filter(city => city.id !== idCity));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: obj.App,\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(Cards, {\n      cities: cities,\n      onClose: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 6\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/leone/Desktop/Henry_m2/FT-M2/08-React-Estado-LifeCycle/homework/src/App.js"],"names":["React","useState","Nav","Cards","obj","App","cities","setCities","onSearch","ciudad","fetch","then","r","json","recurso","main","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","oldCities","alert","onClose","idCity","filter","city"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,GAAP,MAAgB,qCAAhB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,EAAD,CAApC;;AAEA,WAASO,QAAT,CAAkBC,MAAlB,EAA0B;AACxBC,IAAAA,KAAK,CAAE,qDAAoDD,MAAO,sDAA7D,CAAL,CACGE,IADH,CACQC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADb,EAEGF,IAFH,CAESG,OAAD,IAAa;AACjB,UAAGA,OAAO,CAACC,IAAX,EAAgB;AACd,cAAMN,MAAM,GAAG;AACbO,UAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACC,IAAR,CAAaI,QAAxB,CADQ;AAEbC,UAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAWJ,OAAO,CAACC,IAAR,CAAaM,QAAxB,CAFQ;AAGbC,UAAAA,GAAG,EAAER,OAAO,CAACS,OAAR,CAAgB,CAAhB,EAAmBC,IAHX;AAIbC,UAAAA,EAAE,EAAEX,OAAO,CAACW,EAJC;AAKbC,UAAAA,IAAI,EAAEZ,OAAO,CAACY,IAAR,CAAaC,KALN;AAMbC,UAAAA,IAAI,EAAEd,OAAO,CAACC,IAAR,CAAaa,IANN;AAObC,UAAAA,IAAI,EAAEf,OAAO,CAACe,IAPD;AAQbN,UAAAA,OAAO,EAAET,OAAO,CAACS,OAAR,CAAgB,CAAhB,EAAmBR,IARf;AASbe,UAAAA,MAAM,EAAEhB,OAAO,CAACgB,MAAR,CAAeC,GATV;AAUbC,UAAAA,OAAO,EAAElB,OAAO,CAACmB,KAAR,CAAcC,GAVV;AAWbC,UAAAA,QAAQ,EAAErB,OAAO,CAACmB,KAAR,CAAcG;AAXX,SAAf;AAaA7B,QAAAA,SAAS,CAAC8B,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAe5B,MAAf,CAAd,CAAT;AACD,OAfD,MAeO;AACL6B,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACD;AACF,KArBH;AAsBC;;AAED,WAASC,OAAT,CAAiBC,MAAjB,EAAwB;AACtBjC,IAAAA,SAAS,CAAC8B,SAAS,IAAIA,SAAS,CAACI,MAAV,CAAiBC,IAAI,IAAIA,IAAI,CAACjB,EAAL,KAAYe,MAArC,CAAd,CAAT;AACD;;AAEF,sBACE;AAAK,IAAA,SAAS,EAAGpC,GAAG,CAACC,GAArB;AAAA,4BACE,QAAC,GAAD;AAAK,MAAA,QAAQ,EAAEG;AAAf;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEF,MAAf;AAAuB,MAAA,OAAO,EAAIiC;AAAlC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMF;;GAtCuBlC,G;;KAAAA,G","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Nav from \"./components/Nav.jsx\";\r\nimport Cards from \"./components/Cards.jsx\";\r\nimport obj from \"./components/modules/App.module.css\";\r\n\r\nexport default function App() {\r\n  const [cities, setCities] = useState([]);\r\n\r\n  function onSearch(ciudad) {\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=5bb68976e3a596b8fcd7286589d12add&units=metric`)\r\n      .then(r => r.json())\r\n      .then((recurso) => {\r\n        if(recurso.main){\r\n          const ciudad = {\r\n            min: Math.round(recurso.main.temp_min),\r\n            max: Math.round(recurso.main.temp_max),\r\n            img: recurso.weather[0].icon,\r\n            id: recurso.id,\r\n            wind: recurso.wind.speed,\r\n            temp: recurso.main.temp,\r\n            name: recurso.name,\r\n            weather: recurso.weather[0].main,\r\n            clouds: recurso.clouds.all,\r\n            latitud: recurso.coord.lat,\r\n            longitud: recurso.coord.lon\r\n          };\r\n          setCities(oldCities => [...oldCities, ciudad]);\r\n        } else {\r\n          alert(\"Ciudad no encontrada\");\r\n        }\r\n      });\r\n    }\r\n\r\n    function onClose(idCity){\r\n      setCities(oldCities => oldCities.filter(city => city.id !== idCity));\r\n    }\r\n\r\n   return (\r\n     <div className= {obj.App}>\r\n       <Nav onSearch={onSearch}/>\r\n       <Cards cities={cities} onClose = {onClose}/>\r\n     </div>\r\n   );\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}